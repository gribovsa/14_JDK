package set;
/**
 *  Также стоит упомянуть еще реализацию TreeSet. Обобщенный класс TreeSet<E>
 *  представляет структуру данных в виде дерева, в котором все объекты хранятся в
 *  отсортированном виде по возрастанию (натуральный порядок или компаратор).
 *  TreeSet является наследником класса AbstractSet и реализует интерфейс
 *  NavigableSet (позволяет извлекать элементы на основании их значений), а
 *  следовательно, и интерфейс SortedSet (предназначен для создания коллекций,
 *  который хранят элементы в отсортированном виде).
 *  Таким образом если в рамках решения задачи, вам необходима коллекция,
 *  гарантирующая уникальность и отсортированность элементов — TreeSet это ваш
 *  выбор.
 */

import java.util.Comparator;
import java.util.TreeSet;

public class ExTreeSet {
    //Конструктор по умолчанию
    TreeSet defaultConstructor = new TreeSet();

    //Конструктор, добавляющий элементы из другой коллекции
    TreeSet fromCollection = new TreeSet(defaultConstructor);

    //Конструктор создаёт пустое дерево, где все добавляемые элементы впоследствии будут отсортированы компаратором
    TreeSet withComporator = new TreeSet(new Comparator() {
        @Override
        //здесь можно описать свою логику сравнения объектов из которых формируется красно-чёрное дерево
        public int compare(Object o1, Object o2) {
            return 0;
        }
    });
}
